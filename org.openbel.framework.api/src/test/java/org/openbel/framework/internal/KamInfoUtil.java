/**
 *  Copyright 2013 OpenBEL Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.openbel.framework.internal;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.openbel.framework.common.enums.DatabaseType;
import org.openbel.framework.core.df.DBConnection;
import org.openbel.framework.internal.KAMCatalogDao;
import org.openbel.framework.internal.KAMCatalogDao.KamInfo;

public class KamInfoUtil {

    static ResultSet mockRs = new NullResultSet() {

        /**
         * {@inheritDoc}
         */
        @Override
        public boolean next() throws SQLException {
            return true;
        }

        /**
         * {@inheritDoc}
         */
        @Override
        public String getString(int columnIndex) throws SQLException {
            return "test";
        }

        /**
         * {@inheritDoc}
         */
        @Override
        public int getInt(int columnIndex) throws SQLException {
            return 1;
        }

        /**
         * {@inheritDoc}
         */
        @Override
        public java.sql.Date getDate(int columnIndex) throws SQLException {
            return new java.sql.Date(-1);
        }

    };

    static PreparedStatement mockStmt = new NullPreparedStatement() {

        /**
         * {@inheritDoc}
         */
        @Override
        public ResultSet executeQuery() throws SQLException {
            return mockRs;
        }

    };

    static Connection mockConn = new NullConnection() {
        /**
         * {@inheritDoc}
         */
        @Override
        public PreparedStatement prepareStatement(String sql,
                int autoGeneratedKeys) throws SQLException {
            return mockStmt;
        }

    };

    /**
     * Creates a test {@link KamInfo} object.
     *
     * @return a test {@link KamInfo}
     * @throws SQLException Thrown if a SQL error occurred accessing the KAM
     * catalog
     */
    public static KamInfo createKamInfo() throws SQLException {
        DBConnection dbc =
                new DBConnection(mockConn, DatabaseType.DERBY, "", "", "");
        KAMCatalogDao kcdao = new KAMCatalogDao(dbc, "foo", "bar");
        return kcdao.getKamInfoByName("test");
    }
}
